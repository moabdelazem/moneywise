generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Category {
  FOOD
  TRANSPORTATION
  HOUSING
  UTILITIES
  AUTOMOBILE
  ENTERTAINMENT
  OTHER
}

enum GoalStatus {
  IN_PROGRESS
  COMPLETED
  ABANDONED
}

enum TransactionType {
  EXPENSE
  INCOME
  TRANSFER
}

model User {
  id                 String        @id @default(uuid())
  name               String
  email              String        @unique
  password           String
  currency           String        @default("EGP")
  emailNotifications Boolean       @default(true)
  isDeleted          Boolean       @default(false)
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  budgets            Budget[]
  expenses           Expense[]
  incomes            Income[]
  savings            Savings[]
  goals              Goal[]
  transactions       Transaction[]
}

model Expense {
  id          String   @id @default(cuid())
  amount      Float
  description String
  date        DateTime
  category    Category
  status      String   @default("PENDING")
  notes       String?
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isDeleted   Boolean  @default(false)

  @@index([userId, category])
}

model Budget {
  id        String   @id @default(cuid())
  userId    String
  category  Category
  amount    Float
  spent     Float    @default(0)
  remaining Float    @default(0)
  month     Int
  year      Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, category, month, year])
  @@index([userId])
}

model Income {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  amount      Float
  description String?
  date        DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isDeleted   Boolean  @default(false)

  @@index([userId])
}

model Savings {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  amount      Float
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isDeleted   Boolean  @default(false)

  @@index([userId])
}

model Goal {
  id            String     @id @default(cuid())
  userId        String
  user          User       @relation(fields: [userId], references: [id])
  name          String
  amount        Float
  currentAmount Float      @default(0)
  status        GoalStatus @default(IN_PROGRESS)
  dueDate       DateTime
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  isDeleted     Boolean    @default(false)

  @@index([userId])
}

model Transaction {
  id          String          @id @default(cuid())
  userId      String
  user        User            @relation(fields: [userId], references: [id])
  amount      Float
  type        TransactionType
  description String?
  date        DateTime        @default(now())
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  @@index([userId, type])
}
