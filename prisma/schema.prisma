generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Category {
  FOOD
  TRANSPORTATION
  HOUSING
  UTILITIES
  AUTOMOBILE
  ENTERTAINMENT
  OTHER
}

enum GoalStatus {
  IN_PROGRESS
  COMPLETED
  ABANDONED
}

enum TransactionType {
  EXPENSE
  INCOME
  TRANSFER
}

model User {
  id                 String     @id @default(uuid())
  name               String
  email              String     @unique
  password           String
  currency           String     @default("EGP")
  emailNotifications Boolean    @default(true)
  isDeleted          Boolean    @default(false)
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  budgets            Budget[]
  expenses           Expense[]
  Reminder           Reminder[]
}

model Expense {
  id          String   @id @default(cuid())
  amount      Float
  description String
  date        DateTime
  category    Category
  status      String   @default("PENDING")
  notes       String?
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isDeleted   Boolean  @default(false)

  @@index([userId, category])
}

model Budget {
  id        String   @id @default(cuid())
  userId    String
  category  Category
  amount    Float
  spent     Float    @default(0)
  remaining Float    @default(0)
  month     Int
  year      Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, category, month, year])
  @@index([userId])
}

model Reminder {
  id          String    @id @default(cuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  title       String
  amount      Float
  dueDate     DateTime
  category    Category
  status      String    @default("PENDING")
  isRecurring Boolean   @default(false)
  frequency   String? // MONTHLY, WEEKLY, etc.
  lastSent    DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([userId, status])
}
